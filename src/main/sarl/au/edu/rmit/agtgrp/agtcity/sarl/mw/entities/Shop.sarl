/** 
 * SARL-MASSIM - Interface between the SARL agent-oriented language 
 * and the MASSIM 2017 server
 * Copyright (C) 2017 The SARL-MASSIM Authors.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.mw.entities

import java.util.HashMap
import eis.iilang.ParameterList
import eis.iilang.Function
import au.edu.rmit.agtgrp.agtcity.sarl.mw.aggregator.Util
import eis.iilang.Percept
import au.edu.rmit.agtgrp.agtcity.sarl.mw.aggregator.SimStartBuffer

 /**
  * Shop describes an instance of a shop in the world
  * 
  * @param p the MASSIM Percept that is used to create the shop
  */
 
class Shop extends Facility { 
    var shopItems : HashMap<String, ShopItem>
    var restock : double
    
    /**
     * Constructs a new Shop object. 
     */
    new(p : Percept) { 
    	// p can be simple with just location: shop(shop0,48.84111,2.27167)
    	// 	or it can have more complex structure with restock and items being sold there
    	super(p)
    	
    	
		// Now we check if it has restock and list of items being sold,may or may not have that info
    	if (p.parameters.length >= 4) {
			this.restock = Util.extractDouble(p.parameters.get(3))
		}
		
    	if (p.parameters.length >= 5) {
			this.shopItems = new HashMap<String, ShopItem>
			var items = p.parameters.get(4) as ParameterList
			for (item : items) {
				var f = item as Function
				var itemName = Util.extractString(f.parameters.get(0))
				var itemObj = SimStartBuffer.getItem(itemName)
				var itemPrice = Util.extractDouble(f.parameters.get(1))
				var itemQty = Util.extractDouble(f.parameters.get(2))
				shopItems.put(itemName, new ShopItem(itemObj, itemPrice, itemQty))
			} 
		}
    }
    def getShopItems(): HashMap<String, ShopItem>{
    	return shopItems
    }
    
}
