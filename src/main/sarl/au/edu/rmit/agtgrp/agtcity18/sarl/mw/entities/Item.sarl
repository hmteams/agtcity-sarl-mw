/** 
 * SARL-MASSIM - Interface between the SARL agent-oriented language 
 * and the MASSIM 2017 server
 * Copyright (C) 2017 The SARL-MASSIM Authors.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity18.sarl.mw.entities

import java.util.Map
import java.util.HashMap
import eis.iilang.Percept
import au.edu.rmit.agtgrp.agtcity18.sarl.mw.aggregator.Util
import eis.iilang.Function
import eis.iilang.ParameterList
import java.util.Set
import java.util.HashSet

/**
 * An Item Object which contains details about a particular item
 * 
 * Documentation for messages/percepts: https://github.com/agentcontest/massim/blob/massim-2018-1.2/docs/eismassim.md
 */
class Item {
	public var name : String
	public var volume : double
	public var roles : Set<String>	// In 2018, we just store the names of the roles, not their objects in aggregator
	public var parts : Set<String> // In 2018, we just store the names of the parts, not their objects in aggregator
    /**
     * Constructs a new instance of an item. 
     */
    new(name : String, volume : double) {
		//    Example: item(item44,9,roles([drone,car]),parts([item32,item2,item18,item10,item4]))
		// No tools as in 2017, but the roles that can help assemble the item
		
        this.name = name
        this.volume = volume
        this.roles = new HashSet;
        this.parts = new HashSet;
    }
    
    new(percept : Percept) {
		this.roles = new HashSet;
    	this.parts = new HashSet;
    	this.name = Util.extractString(percept.parameters.get(0))
    	this.volume = Util.extractDouble(percept.parameters.get(1))
    	
    	// Populate the roles required for this item (to be assembled)
    	val roleFunc = percept.parameters.get(2) as Function
    	val roleList = roleFunc.parameters.get(0) as ParameterList
    	for (r : roleList){
    		val roleName = Util.extractString(r)
    		this.roles.add(roleName)
    	}

		// Populate the part items required for this item (to be built)
    	val partsFunc = percept.parameters.get(3) as Function
		val partsList = partsFunc.parameters.get(0) as ParameterList
		for (p : partsList) {
			var partName : String = Util.extractString(p)
			this.parts.add(partName)
		}
	}
    
    /**
     * @return The name of an Item
     */
    def getName() : String{
        return name
    }
    
    /**
     * @return The volume the item takes up
     */
    def getVolume() : double{
        return volume
    }

	def getTools() : Map<String, Tool> {
		return this.tools
	}

	def getParts() : Set<String> {
		return this.parts
	}

	def getRoles() : Set<String> {
		return this.roles
	}
	

	def addRole(roleName : String) : void {
    	this.roles.add(roleName)
    }
    
    def addPart(partName : String) : void {
    	this.parts.add(partName)
    }


}
